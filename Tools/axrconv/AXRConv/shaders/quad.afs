#version 330 core
out vec4 color;
in vec2 quadUV;

uniform sampler2D quadTexture;
uniform usampler2D idTexture;

ivec2 kernelOffsets[9] = ivec2[](
	ivec2(-1, 1),
	ivec2(0, 1),
	ivec2(1, 1),
	ivec2(-1, 0),
	ivec2(0, 0),
	ivec2(1, 0),
	ivec2(-1, -1),
	ivec2(0, -1),
	ivec2(1, -1)
);

float sobelx[9] = float[](
	1, 0, -1,
	2, 0, -2,
	1, 0, -1
);

float sobely[9] = float[](
	1, 2, 1,
	0, 0, 0,
	-1, -2, -1
);


void main(){

	float xs, ys;
	vec4 s, c;
	
	for(int i = 0; i < 9; i++){
		xs += sobelx[i] * textureOffset(idTexture, quadUV, kernelOffsets[i]).g;
	}
	
	for(int i = 0; i < 9; i++){
		ys += sobely[i] * textureOffset(idTexture, quadUV, kernelOffsets[i]).g;
	}

	s = vec4(1.0, 0.5, 0.0, 1.0) * step(0.1, length(vec2(xs, ys)));
	c = texture(quadTexture, quadUV);
	color = c + s;
	
}