#version 430
out vec4 color;

in vec3 pos;
in vec2 uv;
in vec3 nrml;
in vec4 shadowPos;

struct PointLight {
	vec3 position;
	vec3 color;
	float radius;
	float intensity;
};

struct DirectionalLight {
	vec3 direction;
	vec3 color;
	float intensity;
};

struct SpotLight {
	vec3 position;
	vec3 direction;
	vec3 color;
	float outerAngle;
	float innerAngle;
	float radius;
	float intensity;
};

const int maxPointLights = 4;
const int maxDirectionalLights = 4;
const int maxSpotLights = 4;

layout (std140) uniform Lights {

	PointLight pointLights[maxPointLights];
	DirectionalLight directionalLights[maxDirectionalLights];
	SpotLight spotLights[maxSpotLights];
	
	int plCount;
	int dlCount;
	int slCount;
	
};

uniform sampler2DShadow shadowMap;
uniform sampler2D diffuseTexture;
uniform vec4 baseCol;
uniform mat3 srtMatrix;

const float shadowBias = 0.0026;
const int centerSamples = 5;
const int sampleSize = 4;

const vec2 poissonDisk[64] = vec2[](
	vec2(-0.613392, 0.617481),
	vec2(0.170019, -0.040254),
	vec2(-0.299417, 0.791925),
	vec2(0.645680, 0.493210),
	vec2(-0.651784, 0.717887),
	vec2(0.421003, 0.027070),
	vec2(-0.817194, -0.271096),
	vec2(-0.705374, -0.668203),
	vec2(0.977050, -0.108615),
	vec2(0.063326, 0.142369),
	vec2(0.203528, 0.214331),
	vec2(-0.667531, 0.326090),
	vec2(-0.098422, -0.295755),
	vec2(-0.885922, 0.215369),
	vec2(0.566637, 0.605213),
	vec2(0.039766, -0.396100),
	vec2(0.751946, 0.453352),
	vec2(0.078707, -0.715323),
	vec2(-0.075838, -0.529344),
	vec2(0.724479, -0.580798),
	vec2(0.222999, -0.215125),
	vec2(-0.467574, -0.405438),
	vec2(-0.248268, -0.814753),
	vec2(0.354411, -0.887570),
	vec2(0.175817, 0.382366),
	vec2(0.487472, -0.063082),
	vec2(-0.084078, 0.898312),
	vec2(0.488876, -0.783441),
	vec2(0.470016, 0.217933),
	vec2(-0.696890, -0.549791),
	vec2(-0.149693, 0.605762),
	vec2(0.034211, 0.979980),
	vec2(0.503098, -0.308878),
	vec2(-0.016205, -0.872921),
	vec2(0.385784, -0.393902),
	vec2(-0.146886, -0.859249),
	vec2(0.643361, 0.164098),
	vec2(0.634388, -0.049471),
	vec2(-0.688894, 0.007843),
	vec2(0.464034, -0.188818),
	vec2(-0.440840, 0.137486),
	vec2(0.364483, 0.511704),
	vec2(0.034028, 0.325968),
	vec2(0.099094, -0.308023),
	vec2(0.693960, -0.366253),
	vec2(0.678884, -0.204688),
	vec2(0.001801, 0.780328),
	vec2(0.145177, -0.898984),
	vec2(0.062655, -0.611866),
	vec2(0.315226, -0.604297),
	vec2(-0.780145, 0.486251),
	vec2(-0.371868, 0.882138),
	vec2(0.200476, 0.494430),
	vec2(-0.494552, -0.711051),
	vec2(0.612476, 0.705252),
	vec2(-0.578845, -0.768792),
	vec2(-0.772454, -0.090976),
	vec2(0.504440, 0.372295),
	vec2(0.155736, 0.065157),
	vec2(0.391522, 0.849605),
	vec2(-0.620106, -0.328104),
	vec2(0.789239, -0.419965),
	vec2(-0.545396, 0.538133),
	vec2(-0.178564, -0.596057)
);


float fetchShadow(vec4 pos){

	vec3 projCoords = pos.xyz / pos.w;
	projCoords = projCoords * 0.5 + 0.5;
	projCoords.z -= shadowBias;
	
	float shadow = 0.0;
	
	//Overblade sampling
	for(int i = -sampleSize; i <= sampleSize; i++){
		for(int j = -sampleSize; j <= sampleSize; j++){
			shadow += textureOffset(shadowMap, projCoords, ivec2(i, j));
		}
	}
	
	shadow += centerSamples * texture(shadowMap, projCoords);
	return shadow / (pow(2 * sampleSize + 1, 2) + centerSamples);
	
	/*
	//Poisson sampling
	for(int i = 0; i < 64; i++){
		shadow += texture(shadowMap, vec3(projCoords.xy + poissonDisk[i] / 500.0, projCoords.z));
	}
	
	return shadow / 64;
	*/
}


vec3 blinnPhong(vec3 diffuseColor){
	
	vec3 ambient = 0.01 * diffuseColor;
	vec3 diffuse = vec3(0.0);
	vec3 specular = vec3(0.0);

	vec3 normal = normalize(nrml);
	vec3 viewDir = normalize(-pos);

	for(int i = 0; i < dlCount; i++){

		vec3 lightDir = -directionalLights[i].direction;
		vec3 lightColor = directionalLights[i].color;
		float intensity = directionalLights[i].intensity;

		float diff = max(dot(lightDir, normal), 0.0);
		diffuse += diff * lightColor * intensity;
				
		vec3 halfwayDir = normalize(lightDir + viewDir);  
		float spec = pow(max(dot(normal, halfwayDir), 0.0), 32.0);
		specular += spec * lightColor * intensity * vec3(0.1);
		
	}

	diffuse *= diffuseColor;
	float shadow = fetchShadow(shadowPos);

	return ambient + shadow * (diffuse + specular);

}


void main(){

    vec2 transformedUV = vec2(srtMatrix * vec3(uv, 1.0));
    vec4 fullTexColor = texture(diffuseTexture, transformedUV);
    vec3 texColor = fullTexColor.rgb;
	
	vec3 blinnPhongColor = blinnPhong(texColor);
	
	/*
		float distance = length(lightPos - pos);

		// attenuation

		float a = 1.0;
		float b = 0.09;
		float c = 0.0032;
		float x = distance;

		// a / (1 + b * x + c * x ^ 2)

		float attenuation = a / (1.0 + b * x + c * x * x);
		blinnPhongColor *= attenuation;
	*/
	
    color = vec4(blinnPhongColor, fullTexColor.a);
    color *= baseCol;

}